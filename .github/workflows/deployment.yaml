name: Jira Deployment Tracking

on:
  workflow_run:
    workflows: ['Terraform Apply']
    types:
      - completed

jobs:
  track-deployment:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get workflow details
        id: workflow-details
        run: |
          echo "workflow_id=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
          echo "run_number=${{ github.event.workflow_run.run_number }}" >> $GITHUB_OUTPUT
          echo "conclusion=${{ github.event.workflow_run.conclusion }}" >> $GITHUB_OUTPUT
          echo "created_at=${{ github.event.workflow_run.created_at }}" >> $GITHUB_OUTPUT
          echo "updated_at=${{ github.event.workflow_run.updated_at }}" >> $GITHUB_OUTPUT
          
          # Determine environment from branch
          if [[ "${{ github.event.workflow_run.head_branch }}" == "feature" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.workflow_run.head_branch }}" == "main" ]]; then
            echo "environment=uat" >> $GITHUB_OUTPUT
          fi
      
      - name: Download workflow artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: Terraform Apply
          run_id: ${{ github.event.workflow_run.id }}
          path: artifacts
      
      - name: Generate deployment ID
        id: deployment-id
        run: |
          ENVIRONMENT="${{ steps.workflow-details.outputs.environment }}"
          DATE=$(date +%Y%m%d)
          BUILD_NUMBER=${{ github.event.workflow_run.run_number }}
          
          # Create deployment ID
          DEPLOYMENT_ID="${ENVIRONMENT}-deploy-${DATE}-${BUILD_NUMBER}"
          echo "deployment_id=${DEPLOYMENT_ID}" >> $GITHUB_OUTPUT
      
      - name: Get commit information
        id: commit-info
        run: |
          BRANCH="${{ github.event.workflow_run.head_branch }}"
          
          # Get the commit hash being deployed
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "commit_hash=${COMMIT_HASH}" >> $GITHUB_OUTPUT
          
          # Get commit author
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          echo "commit_author=${COMMIT_AUTHOR}" >> $GITHUB_OUTPUT
          
          # Get commit message
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          echo "commit_message=${COMMIT_MESSAGE}" >> $GITHUB_OUTPUT
          
          # Extract Jira IDs from recent commits (last 10)
          git log -10 --pretty=format:"%s" | grep -o "[A-Z]\+-[0-9]\+" | sort | uniq > jira_ids.txt
          
          # Create a JSON array of Jira IDs
          echo "jira_ids=$(cat jira_ids.txt | jq -R . | jq -s .)" >> $GITHUB_OUTPUT
      
      - name: Generate deployment status
        id: deployment-status
        run: |
          STATUS="${{ steps.workflow-details.outputs.conclusion }}"
          ENVIRONMENT="${{ steps.workflow-details.outputs.environment }}"
          START_TIME="${{ steps.workflow-details.outputs.created_at }}"
          END_TIME="${{ steps.workflow-details.outputs.updated_at }}"
          
          # Calculate deployment duration
          start_seconds=$(date -d "${START_TIME}" +%s)
          end_seconds=$(date -d "${END_TIME}" +%s)
          DURATION=$((end_seconds - start_seconds))
          
          # Format duration
          MINUTES=$((DURATION / 60))
          SECONDS=$((DURATION % 60))
          DURATION_FORMATTED="${MINUTES}m ${SECONDS}s"
          
          echo "status=${STATUS}" >> $GITHUB_OUTPUT
          echo "duration=${DURATION_FORMATTED}" >> $GITHUB_OUTPUT
          
          # Create state for Jira
          if [[ "${STATUS}" == "success" ]]; then
            echo "jira_state=successful" >> $GITHUB_OUTPUT
          else
            echo "jira_state=failed" >> $GITHUB_OUTPUT
          fi
      
      - name: Authenticate with Jira
        uses: atlassian/gajira-login@master
        env:
          JIRA_CLIENT_ID: ${{ secrets.JIRA_CLIENT_ID }}
          JIRA_CLIENT_SECRET: ${{ secrets.JIRA_CLIENT_SECRET }}
          JIRA_BASE_URL: ${{ secrets.JIRA_CLOUD_INSTANCE_BASE_URL }}
      
      - name: Create deployment in Jira
        if: always()
        id: create-deployment
        uses: actions/github-script@v6
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_CLOUD_INSTANCE_BASE_URL }}
          JIRA_AUTH_TOKEN: ${{ secrets.JIRA_AUTH_TOKEN }}
          DEPLOYMENT_ID: ${{ steps.deployment-id.outputs.deployment_id }}
          ENVIRONMENT: ${{ steps.workflow-details.outputs.environment }}
          STATE: ${{ steps.deployment-status.outputs.jira_state }}
          PIPELINE_ID: ${{ github.event.workflow_run.id }}
          PIPELINE_DISPLAY_NAME: "Terraform Apply #${{ github.event.workflow_run.run_number }}"
          PIPELINE_URL: ${{ github.event.workflow_run.html_url }}
          UPDATED_AT: ${{ steps.workflow-details.outputs.updated_at }}
          JIRA_IDS: ${{ steps.commit-info.outputs.jira_ids }}
        with:
          script: |
            const jiraIds = JSON.parse(process.env.JIRA_IDS);
            
            if (jiraIds.length === 0) {
              console.log("No Jira IDs found in commits");
              return;
            }
            
            // Create deployment payload for Jira
            const payload = {
              deployments: [
                {
                  deploymentSequenceNumber: parseInt(${{ github.event.workflow_run.run_number }}),
                  updateSequenceNumber: parseInt(${{ github.event.workflow_run.run_number }}),
                  displayName: process.env.DEPLOYMENT_ID,
                  url: process.env.PIPELINE_URL,
                  description: `Terraform deployment to ${process.env.ENVIRONMENT} environment`,
                  lastUpdated: process.env.UPDATED_AT,
                  state: process.env.STATE,
                  pipeline: {
                    id: process.env.PIPELINE_ID,
                    displayName: process.env.PIPELINE_DISPLAY_NAME,
                    url: process.env.PIPELINE_URL
                  },
                  environment: {
                    id: process.env.ENVIRONMENT,
                    displayName: process.env.ENVIRONMENT.toUpperCase(),
                    type: "development"
                  },
                  associations: jiraIds.map(issueKey => ({
                    associationType: "issueIdOrKeys",
                    values: [issueKey]
                  }))
                }
              ]
            };
            
            // For UAT, change environment type
            if (process.env.ENVIRONMENT === "uat") {
              payload.deployments[0].environment.type = "staging";
            }
            
            try {
              const exec = require('child_process').execSync;
              const cmd = `curl -s -X POST \
                -H "Authorization: Bearer ${process.env.JIRA_AUTH_TOKEN}" \
                -H "Content-Type: application/json" \
                -H "Accept: application/json" \
                "${process.env.JIRA_BASE_URL}/rest/deployments/0.1/bulk" \
                -d '${JSON.stringify(payload)}'`;
              
              const result = exec(cmd);
              console.log("Deployment created in Jira");
              console.log(result.toString());
            } catch (error) {
              console.error(`Error creating deployment in Jira: ${error.message}`);
            }
      
      - name: Generate deployment report
        if: always()
        run: |
          DEPLOYMENT_ID="${{ steps.deployment-id.outputs.deployment_id }}"
          ENVIRONMENT="${{ steps.workflow-details.outputs.environment }}"
          STATUS="${{ steps.deployment-status.outputs.status }}"
          DURATION="${{ steps.deployment-status.outputs.duration }}"
          
          # Create HTML report
          cat > deployment-report.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
            <title>Deployment Report - ${DEPLOYMENT_ID}</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              h1 { color: #333; }
              .summary { background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
              .success { color: #2e7d32; }
              .failure { color: #c62828; }
              table { border-collapse: collapse; width: 100%; }
              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
              th { background-color: #f2f2f2; }
            </style>
          </head>
          <body>
            <h1>Deployment Report - ${DEPLOYMENT_ID}</h1>
            
            <div class="summary">
              <h2>Deployment Summary</h2>
              <p><strong>Environment:</strong> ${ENVIRONMENT}</p>
              <p><strong>Status:</strong> <span class="${STATUS == 'success' ? 'success' : 'failure'}">${STATUS}</span></p>
              <p><strong>Duration:</strong> ${DURATION}</p>
              <p><strong>Date:</strong> $(date +"%Y-%m-%d %H:%M:%S")</p>
              <p><strong>Workflow:</strong> <a href="${{ github.event.workflow_run.html_url }}">Terraform Apply #${{ github.event.workflow_run.run_number }}</a></p>
            </div>
            
            <h2>Associated Jira Issues</h2>
            <table>
              <tr>
                <th>Jira ID</th>
                <th>Link</th>
              </tr>
          EOF
          
          # Add each Jira ID to the table
          cat jira_ids.txt | while read -r JIRA_ID; do
            cat >> deployment-report.html << ROW
              <tr>
                <td>${JIRA_ID}</td>
                <td><a href="${{ secrets.JIRA_CLOUD_INSTANCE_BASE_URL }}/browse/${JIRA_ID}">${JIRA_ID}</a></td>
              </tr>
          ROW
          done
          
          # Close HTML
          cat >> deployment-report.html << EOF
            </table>
          </body>
          </html>
          EOF
          
          # Create markdown version
          cat > deployment-report.md << EOF
          # Deployment Report - ${DEPLOYMENT_ID}
          
          ## Deployment Summary
          * **Environment:** ${ENVIRONMENT}
          * **Status:** ${STATUS}
          * **Duration:** ${DURATION}
          * **Date:** $(date +"%Y-%m-%d %H:%M:%S")
          * **Workflow:** [Terraform Apply #${{ github.event.workflow_run.run_number }}](${{ github.event.workflow_run.html_url }})
          
          ## Associated Jira Issues
          
          | Jira ID | Link |
          | ------- | ---- |
          EOF
          
          # Add each Jira ID to the markdown table
          cat jira_ids.txt | while read -r JIRA_ID; do
            echo "| ${JIRA_ID} | [$JIRA_ID](${{ secrets.JIRA_CLOUD_INSTANCE_BASE_URL }}/browse/${JIRA_ID}) |" >> deployment-report.md
          done
      
      - name: Upload deployment report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report-${{ steps.deployment-id.outputs.deployment_id }}
          path: |
            deployment-report.html
            deployment-report.md
          retention-days: 90
      
      - name: Create GitHub deployment
        if: always()
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: ${{ steps.workflow-details.outputs.environment }}
          ref: ${{ github.event.workflow_run.head_sha }}
          initial-status: ${{ steps.deployment-status.outputs.status }}
          description: "Terraform deployment to ${{ steps.workflow-details.outputs.environment }}"