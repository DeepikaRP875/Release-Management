name: Sync GitHub Release to Jira

on:
  release:
    types: [published, edited, deleted]

jobs:
  sync-to-jira:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get release info
        id: release_info
        if: github.event.action != 'deleted'
        run: |
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "name=$(jq -r .release.name $GITHUB_EVENT_PATH)" >> $GITHUB_OUTPUT
          echo "body=$(jq -r .release.body $GITHUB_EVENT_PATH)" >> $GITHUB_OUTPUT
          echo "prerelease=$(jq -r .release.prerelease $GITHUB_EVENT_PATH)" >> $GITHUB_OUTPUT
          echo "published_at=$(jq -r .release.published_at $GITHUB_EVENT_PATH)" >> $GITHUB_OUTPUT
      
      - name: Extract Jira tickets from release notes
        if: github.event.action != 'deleted'
        id: extract_tickets
        run: |
          TICKETS=$(echo "${{ steps.release_info.outputs.body }}" | grep -oE '[A-Z]+-[0-9]+' | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "tickets=$TICKETS" >> $GITHUB_OUTPUT
      
      - name: Get contributors since last release
        if: github.event.action != 'deleted'
        id: contributors
        run: |
          PREVIOUS_TAG=$(git tag --sort=-creatordate | grep -v ${GITHUB_REF#refs/tags/} | head -n 1)
          if [ -z "$PREVIOUS_TAG" ]; then
            CONTRIBUTORS=$(git log --format="%an" | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
          else
            CONTRIBUTORS=$(git log $PREVIOUS_TAG..HEAD --format="%an" | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
          fi
          echo "list=$CONTRIBUTORS" >> $GITHUB_OUTPUT
      
      - name: Setup Jira CLI
        uses: atlassian/gajira-cli@master
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
      
      - name: Create or update Jira release
        if: github.event.action != 'deleted'
        run: |
          RELEASE_DESC="Release Notes:
          ${{ steps.release_info.outputs.body }}
          
          Contributors: $(echo '${{ steps.contributors.outputs.list }}' | jq -r '. | join(", ")')
          
          Associated Tickets: $(echo '${{ steps.extract_tickets.outputs.tickets }}' | jq -r '. | join(", ")')"
          
          IS_RELEASED=$([ "${{ steps.release_info.outputs.prerelease }}" == "false" ] && echo "true" || echo "false")
          
          # Use Jira REST API to create or update the release
          RELEASE_DATA=$(cat <<EOF
          {
            "name": "${{ steps.release_info.outputs.name }}",
            "description": "$RELEASE_DESC",
            "released": $IS_RELEASED,
            "releaseDate": "${{ steps.release_info.outputs.published_at }}",
            "project": "${{ secrets.JIRA_PROJECT }}"
          }
          EOF
          )
          
          curl -X POST \
            -H "Authorization: Basic $(echo -n $JIRA_USER_EMAIL:$JIRA_API_TOKEN | base64)" \
            -H "Content-Type: application/json" \
            -d "$RELEASE_DATA" \
            "$JIRA_BASE_URL/rest/api/3/version"
      
      - name: Link issues to release
        if: github.event.action != 'deleted'
        run: |
          for TICKET in $(echo '${{ steps.extract_tickets.outputs.tickets }}' | jq -r '.[]'); do
            echo "Linking $TICKET to release ${{ steps.release_info.outputs.version }}"
            
            # Get the version ID first
            VERSION_ID=$(curl -s \
              -H "Authorization: Basic $(echo -n $JIRA_USER_EMAIL:$JIRA_API_TOKEN | base64)" \
              "$JIRA_BASE_URL/rest/api/3/project/${{ secrets.JIRA_PROJECT }}/versions" | \
              jq -r '.[] | select(.name=="${{ steps.release_info.outputs.name }}") | .id')
            
            # Add the fixVersion to the issue
            curl -X PUT \
              -H "Authorization: Basic $(echo -n $JIRA_USER_EMAIL:$JIRA_API_TOKEN | base64)" \
              -H "Content-Type: application/json" \
              -d "{\"update\": {\"fixVersions\": [{\"add\": {\"id\": \"$VERSION_ID\"}}]}}" \
              "$JIRA_BASE_URL/rest/api/3/issue/$TICKET"
          done
      
      - name: Delete Jira release
        if: github.event.action == 'deleted'
        run: |
          # Get the version ID first
          RELEASE_VERSION=${GITHUB_REF#refs/tags/}
          VERSION_ID=$(curl -s \
            -H "Authorization: Basic $(echo -n $JIRA_USER_EMAIL:$JIRA_API_TOKEN | base64)" \
            "$JIRA_BASE_URL/rest/api/3/project/${{ secrets.JIRA_PROJECT }}/versions" | \
            jq -r '.[] | select(.name=="$RELEASE_VERSION") | .id')
          
          # Delete the version if found
          if [ ! -z "$VERSION_ID" ]; then
            curl -X DELETE \
              -H "Authorization: Basic $(echo -n $JIRA_USER_EMAIL:$JIRA_API_TOKEN | base64)" \
              "$JIRA_BASE_URL/rest/api/3/version/$VERSION_ID"
          fi