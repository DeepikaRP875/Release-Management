name: Generate Release Notes

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number for this release (e.g., 1.0.0)'
        required: true
        type: string
      from_tag:
        description: 'Starting tag/commit for release notes (default: previous release)'
        required: false
        type: string
      to_tag:
        description: 'Ending tag/commit for release notes (default: current HEAD)'
        required: false
        type: string

jobs:
  generate-release-notes:
    permissions:
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      
      - name: Get Release Token
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v3
        with:
          application_id: ${{ secrets.RELEASE_APP_ID }}
          application_private_key: ${{ secrets.RELEASE_APP_CERT }}
      
      - name: Generate changelog
        id: changelog
        run: |
          FROM_TAG="${{ github.event.inputs.from_tag }}"
          TO_TAG="${{ github.event.inputs.to_tag || 'HEAD' }}"
          
          # If from_tag is not provided, use the latest tag
          if [ -z "$FROM_TAG" ]; then
            FROM_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            # If no tags exist, use the first commit
            if [ -z "$FROM_TAG" ]; then
              FROM_TAG=$(git rev-list --max-parents=0 HEAD)
              echo "No previous tags found. Using first commit as starting point."
            else
              echo "Using latest tag $FROM_TAG as starting point."
            fi
          fi
          
          echo "Generating changelog from $FROM_TAG to $TO_TAG"
          
          # Create a temporary file for changelog
          echo "## Release v${{ github.event.inputs.version }}" > changelog.md
          echo "" >> changelog.md
          echo "### 🚀 New Features" >> changelog.md
          
          # Try conventional commits first
          FEATURES=$(git log $FROM_TAG..$TO_TAG --pretty=format:"- %s (%h)" --grep="^feat" 2>/dev/null)
          if [[ -z "$FEATURES" ]]; then
            # Fall back to keyword-based search if no conventional commits
            FEATURES=$(git log $FROM_TAG..$TO_TAG --pretty=format:"- %s (%h)" --grep="add\|new\|feature\|implement" 2>/dev/null)
          fi
          
          if [[ -n "$FEATURES" ]]; then
            echo "$FEATURES" >> changelog.md
          else
            echo "- No new features in this release" >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "### 🐛 Bug Fixes" >> changelog.md
          
          FIXES=$(git log $FROM_TAG..$TO_TAG --pretty=format:"- %s (%h)" --grep="^fix" 2>/dev/null)
          if [[ -z "$FIXES" ]]; then
            FIXES=$(git log $FROM_TAG..$TO_TAG --pretty=format:"- %s (%h)" --grep="fix\|bug\|issue\|resolve\|patch" 2>/dev/null)
          fi
          
          if [[ -n "$FIXES" ]]; then
            echo "$FIXES" >> changelog.md
          else
            echo "- No bug fixes in this release" >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "### 🔄 Changes & Improvements" >> changelog.md
          
          OTHER_CHANGES=$(git log $FROM_TAG..$TO_TAG --pretty=format:"- %s (%h)" --grep="^refactor\|^chore\|^docs\|^style\|^test\|^ci\|^build\|^perf" 2>/dev/null)
          if [[ -z "$OTHER_CHANGES" ]]; then
            OTHER_CHANGES=$(git log $FROM_TAG..$TO_TAG --pretty=format:"- %s (%h)" --grep="update\|change\|improve\|refactor\|enhance" --invert-grep --grep="^feat\|^fix\|add\|new\|feature\|implement\|fix\|bug\|issue\|resolve\|patch" 2>/dev/null)
          fi
          
          if [[ -n "$OTHER_CHANGES" ]]; then
            echo "$OTHER_CHANGES" >> changelog.md
          else
            echo "- No other changes in this release" >> changelog.md
          fi
          
          # List pull requests if there are any
          PULL_REQUESTS=$(git log $FROM_TAG..$TO_TAG --pretty=format:"%s" | grep -o "#[0-9]\+" | sort -u)
          if [[ -n "$PULL_REQUESTS" ]]; then
            echo "" >> changelog.md
            echo "### 🔀 Merged Pull Requests" >> changelog.md
            for PR in $PULL_REQUESTS; do
              PR_NUM=${PR#"#"}
              PR_TITLE=$(curl -s -H "Authorization: token ${{ steps.get_workflow_token.outputs.token }}" \
                              https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUM | \
                         jq -r '.title')
              if [[ "$PR_TITLE" != "null" ]]; then
                echo "- $PR_TITLE ($PR)" >> changelog.md
              fi
            done
          fi
          
          echo "" >> changelog.md
          
          # List contributors
          echo "### 👥 Contributors" >> changelog.md
          git log $FROM_TAG..$TO_TAG --pretty=format:"%an" | sort -u | while read name; do
            echo "- $name" >> changelog.md
          done
          
          # Save changelog content to GitHub output
          CHANGELOG=$(cat changelog.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Also save to file artifact
          cat changelog.md > CHANGELOG.md
      
      - name: Upload changelog artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelog-v${{ github.event.inputs.version }}
          path: CHANGELOG.md
          retention-days: 30
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ steps.get_workflow_token.outputs.token }}
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false