name: Sync GitHub Release to Jira

on:
  release:
    types: [published, edited, deleted]

jobs:
  sync-to-jira:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Debug event
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "Ref: ${{ github.ref }}"
          echo "Event path: $GITHUB_EVENT_PATH"
          cat $GITHUB_EVENT_PATH
      
      - name: Get release info
        id: release_info
        if: github.event.action != 'deleted'
        run: |
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          # Use jq with error handling
          NAME=$(jq -r '.release.name // .release.tag_name // ""' $GITHUB_EVENT_PATH)
          echo "name=$NAME" >> $GITHUB_OUTPUT
          
          # Handle multiline body safely by encoding as base64
          BODY=$(jq -r '.release.body // ""' $GITHUB_EVENT_PATH | base64 -w 0)
          echo "body_encoded=$BODY" >> $GITHUB_OUTPUT
          
          # Handle prerelease status
          PRERELEASE=$(jq -r '.release.prerelease // false' $GITHUB_EVENT_PATH)
          echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT
          
          # Handle published date
          PUBLISHED=$(jq -r '.release.published_at // ""' $GITHUB_EVENT_PATH)
          echo "published_at=$PUBLISHED" >> $GITHUB_OUTPUT
      
      - name: Extract Jira tickets from release notes
        if: github.event.action != 'deleted'
        id: extract_tickets
        run: |
          # Decode the base64 encoded body
          BODY=$(echo "${{ steps.release_info.outputs.body_encoded }}" | base64 -d)
          
          # Extract tickets and format as JSON array
          TICKETS=$(echo "$BODY" | grep -oE '[A-Z]+-[0-9]+' | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
          
          # Handle case when no tickets are found
          if [ -z "$TICKETS" ] || [ "$TICKETS" == "[]" ]; then
            TICKETS="[]"
          fi
          
          echo "tickets=$TICKETS" >> $GITHUB_OUTPUT
      
      - name: Get contributors since last release
        if: github.event.action != 'deleted'
        id: contributors
        run: |
          # Find previous tag
          PREVIOUS_TAG=$(git tag --sort=-creatordate | grep -v "${GITHUB_REF#refs/tags/}" | head -n 1 || echo "")
          
          # Get contributors
          if [ -z "$PREVIOUS_TAG" ]; then
            CONTRIBUTORS=$(git log --format="%an" | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
          else
            CONTRIBUTORS=$(git log $PREVIOUS_TAG..HEAD --format="%an" | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
          fi
          
          # Handle case when no contributors are found
          if [ -z "$CONTRIBUTORS" ] || [ "$CONTRIBUTORS" == "[]" ]; then
            CONTRIBUTORS="[]"
          fi
          
          echo "list=$CONTRIBUTORS" >> $GITHUB_OUTPUT
      
      - name: Create Jira release
        id: create_jira_release
        if: github.event.action != 'deleted'
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_CLOUD_INSTANCE_BASE_URL: ${{ secrets.JIRA_CLOUD_INSTANCE_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_PROJECT: ${{ secrets.JIRA_PROJECT }}
        run: |
          # Decode the release body
          BODY=$(echo "${{ steps.release_info.outputs.body_encoded }}" | base64 -d)
          
          # Format contributors as comma-separated list
          CONTRIBUTORS_LIST=$(echo '${{ steps.contributors.outputs.list }}' | jq -r 'if . == "[]" or . == null then "None" else . | join(", ") end')
          
          # Format tickets as comma-separated list
          TICKETS_LIST=$(echo '${{ steps.extract_tickets.outputs.tickets }}' | jq -r 'if . == "[]" or . == null then "None" else . | join(", ") end')
          
          # Set release name, defaulting to version if name is empty
          RELEASE_NAME="${{ steps.release_info.outputs.name }}"
          if [ -z "$RELEASE_NAME" ]; then
            RELEASE_NAME="${{ steps.release_info.outputs.version }}"
          fi
          
          # Prepare release description
          RELEASE_DESC="Release Notes:\n${BODY}\n\nContributors: ${CONTRIBUTORS_LIST}\n\nAssociated Tickets: ${TICKETS_LIST}"
          
          # Set released status based on prerelease flag
          IS_RELEASED=$([ "${{ steps.release_info.outputs.prerelease }}" == "false" ] && echo "true" || echo "false")
          
          # Current date in ISO format if published_at is empty
          RELEASE_DATE="${{ steps.release_info.outputs.published_at }}"
          if [ -z "$RELEASE_DATE" ]; then
            RELEASE_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          fi
          
          echo "Creating Jira release: $RELEASE_NAME"
          
          # Check if release already exists
          EXISTING_VERSION=$(curl -s \
            -H "Authorization: Basic $(echo -n $JIRA_USER_EMAIL:$JIRA_API_TOKEN | base64)" \
            "$JIRA_CLOUD_INSTANCE_BASE_URL/rest/api/3/project/$JIRA_PROJECT/versions" | \
            jq -r --arg name "$RELEASE_NAME" '.[] | select(.name==$name) | .id')
          
          if [ -n "$EXISTING_VERSION" ]; then
            # Update existing release
            echo "Updating existing release with ID: $EXISTING_VERSION"
            curl -X PUT \
              -H "Authorization: Basic $(echo -n $JIRA_USER_EMAIL:$JIRA_API_TOKEN | base64)" \
              -H "Content-Type: application/json" \
              -d "{
                \"name\": \"$RELEASE_NAME\",
                \"description\": \"$RELEASE_DESC\",
                \"released\": $IS_RELEASED,
                \"releaseDate\": \"$RELEASE_DATE\"
              }" \
              "$JIRA_CLOUD_INSTANCE_BASE_URL/rest/api/3/version/$EXISTING_VERSION"
            
            VERSION_ID=$EXISTING_VERSION
          else
            # Create new release
            echo "Creating new release"
            RESPONSE=$(curl -X POST \
              -H "Authorization: Basic $(echo -n $JIRA_USER_EMAIL:$JIRA_API_TOKEN | base64)" \
              -H "Content-Type: application/json" \
              -d "{
                \"name\": \"$RELEASE_NAME\",
                \"description\": \"$RELEASE_DESC\",
                \"released\": $IS_RELEASED,
                \"releaseDate\": \"$RELEASE_DATE\",
                \"project\": \"$JIRA_PROJECT\"
              }" \
              "$JIRA_CLOUD_INSTANCE_BASE_URL/rest/api/3/version")
            
            echo "Create response: $RESPONSE"
            VERSION_ID=$(echo "$RESPONSE" | jq -r '.id // ""')
          fi
          
          # Save version ID for next step
          echo "version_id=$VERSION_ID" >> $GITHUB_OUTPUT
      
      - name: Link issues to release
        if: github.event.action != 'deleted' && steps.extract_tickets.outputs.tickets != '[]'
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_CLOUD_INSTANCE_BASE_URL: ${{ secrets.JIRA_CLOUD_INSTANCE_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          VERSION_ID: ${{ steps.create_jira_release.outputs.version_id }}
        run: |
          if [ -z "$VERSION_ID" ]; then
            echo "No version ID available, can't link issues"
            exit 1
          fi
          
          # Link each ticket to the release
          for TICKET in $(echo '${{ steps.extract_tickets.outputs.tickets }}' | jq -r '.[]'); do
            echo "Linking $TICKET to release with ID: $VERSION_ID"
            
            # Add the fixVersion to the issue
            curl -X PUT \
              -H "Authorization: Basic $(echo -n $JIRA_USER_EMAIL:$JIRA_API_TOKEN | base64)" \
              -H "Content-Type: application/json" \
              -d "{\"update\": {\"fixVersions\": [{\"add\": {\"id\": \"$VERSION_ID\"}}]}}" \
              "$JIRA_CLOUD_INSTANCE_BASE_URL/rest/api/3/issue/$TICKET"
          done
      
      - name: Delete Jira release
        if: github.event.action == 'deleted'
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_CLOUD_INSTANCE_BASE_URL: ${{ secrets.JIRA_CLOUD_INSTANCE_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_PROJECT: ${{ secrets.JIRA_PROJECT }}
        run: |
          # Get the version name from the ref
          RELEASE_VERSION=${GITHUB_REF#refs/tags/}
          
          # Get the version ID
          VERSION_ID=$(curl -s \
            -H "Authorization: Basic $(echo -n $JIRA_USER_EMAIL:$JIRA_API_TOKEN | base64)" \
            "$JIRA_CLOUD_INSTANCE_BASE_URL/rest/api/3/project/$JIRA_PROJECT/versions" | \
            jq -r --arg name "$RELEASE_VERSION" '.[] | select(.name==$name) | .id')
          
          # Delete the version if found
          if [ -n "$VERSION_ID" ]; then
            echo "Deleting version with ID: $VERSION_ID"
            curl -X DELETE \
              -H "Authorization: Basic $(echo -n $JIRA_USER_EMAIL:$JIRA_API_TOKEN | base64)" \
              "$JIRA_CLOUD_INSTANCE_BASE_URL/rest/api/3/version/$VERSION_ID"
          else
            echo "No version found with name: $RELEASE_VERSION"
          fi